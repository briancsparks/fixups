#!/usr/bin/env node

var   argv                    = require('minimist')(process.argv.slice(2));
var   deepEqual               = require('deep-equal');
const ssg                     = require('./lib/ssg');
const utils                   = require('./lib/utils');
const { deref,addTo,omit }    = utils;

const smartAws                = require('./lib/smart-aws');
const {
  route53,ec2,fix
}                             = smartAws;

//const fixResourceRecordSets   = smartAws.fix.resourceRecordSets;
//const fixInstances            = smartAws.fix.instances;
//const fixInstanceLogging      = smartAws.fix.instanceLogging;
const log                     = ssg.log;

//log(`argv`, {argv});

ssg.runAsyncMain(main);

async function main() {
  var   latest={};

  // ---------- EC2 -- Instances --------------------------------------------------------------------------------------

  // Start the query for instances now -- let it work, while we deal with Route53.
  const reservations_P  = ec2.describeInstances({}).promise();

  // ---------- Route53 -- Get Records --------------------------------------------------------------------------------

  // Get the zones
  const DNSName   = 'cdr0.net.';
  const zones_P   = route53.listHostedZonesByName({DNSName}).promise();

  const [zones]   = [await zones_P];

  const hostedZone = zones.HostedZones.filter((z) => z.Name === DNSName)[0] || {};
  //log(`hostedZone`, hostedZone);

  const zone_P        = route53.getHostedZone({Id: hostedZone.Id}).promise();
  const recordSets_P  = route53.listResourceRecordSets({HostedZoneId: hostedZone.Id}).promise();

  const [zone, recordSets]  = [await zone_P, await recordSets_P];

  const records       = fix.resourceRecordSets(recordSets);

  latest = zone;
  latest = records;

  // ------------------------- ec2

  const reservations  = await reservations_P;
  //const instanceData  = fix.instances(reservations, true);
  const instanceData  = fix.instances(reservations);
  const logInstData   = fix.instanceLogging(instanceData);
  //latest              = logInstData;

  const wrongStates   = Object.keys(instanceData.by.State).filter((st) => (st !== 'stopped' && st !== 'running'));
  //latest = {wrongStates};

  if (wrongStates.length !== 0) {
    // Wait until the instances finish their state change
    console.error(`Waiting for instances to complete: ${wrongStates}`);
    return latest;
  }

  var runningFqdns = {};
  var stoppedFqdns = {};

  latest = {...latest};

  instanceData.by.State.running.forEach((instance) => {
    const fqdns = deref(instance, 'tags0.qn_fqdns') ||[];
    fqdns.forEach((fqdn) => {
      runningFqdns[fqdn] = addTo(runningFqdns[fqdn], instance.PublicIpAddress || instance.commonName);
    });
  });

  instanceData.by.State.stopped.forEach((instance) => {
    const fqdns = deref(instance, 'tags0.qn_fqdns') ||[];
    fqdns.forEach((fqdn) => {
      // Is it running?... then it cannot be stopped
      if (runningFqdns[fqdn])     { return; }

      stoppedFqdns[fqdn] = addTo(stoppedFqdns[fqdn], instance.PublicIpAddress || instance.PrivateIpAddress || instance.commonName);
    });
  });

  // ----- Now we know which FQDNs need to be live, and which can be removed ----------------
  var   Changes = [];

  // FQDNs for running instances -- make sure there is a change, then use UPSERT
  Object.keys(runningFqdns).forEach((fqdn) => {
    const valueList = runningFqdns[fqdn];
    const rrList    = valueList.map((Value) => ({Value}));
    const Name      = `${fqdn}.`;
    var   newRRSet  = {
      Name,
      TTL:              30,
      Type:             'A',
      ResourceRecords:  rrList
    };

    const currentRRSet = getCurrentRRSet(Name);
    //log(`deepEqual???`, {currentRRSet, newRRSet});

    if (!currentRRSet) {
      // Doesnt exist in DNS, add it
      Changes.push({
        Action:             'CREATE',
        ResourceRecordSet:  newRRSet
      });
    }

    else if (!deepEqual(currentRRSet, newRRSet)) {
      Changes.push({
        Action:             'UPSERT',
        ResourceRecordSet:  newRRSet
      });
    }
  });

  Object.keys(stoppedFqdns).forEach((fqdn) => {
    const Name          = `${fqdn}.`;
    const currentRRSet  = getCurrentRRSet(Name);
    log(`stopped & current`, {Name, currentRRSet});

    if (currentRRSet) {
      Changes.push({
        Action:             'DELETE',
        ResourceRecordSet:  currentRRSet
      });
    }
  });

  var   ChangeBatch = {
    Changes, Comment: 'fqnds for cdr0.net'
  };

  var   params = {
    ChangeBatch: {
      Changes,
      Comment: 'fqdns for cdr0.net'
    },
    HostedZoneId: hostedZone.Id
  };
  latest = {...latest, records, runningFqdns, stoppedFqdns, params};

  var receipt, waited, changeInfo;

  if (argv['dry-run']) {
    log(`Dry run: `, params);
    return latest;
  }

  // Do it!
  receipt     = await route53.changeResourceRecordSets(params).promise();
  changeInfo  = await route53.getChange({Id: receipt.ChangeInfo.Id}).promise();
  latest      = {...latest, receipt, changeInfo};

  if (argv.quick) {
    log(`quick`, {receipt, changeInfo});
    return latest;
  }

  await sleep(2500);

  waited      = await route53.waitFor('resourceRecordSetsChanged', {Id: receipt.ChangeInfo.Id}).promise();


  latest = {...latest, waited};
  return latest;
//  return {zones};

  function getCurrentRRSet(name) {
    var rec = records[name] ||[];

    return rec[0];
  }
}

function sleep(milliseconds) {
  return new Promise(resolve => setTimeout(resolve, milliseconds))
}

const dummyExampleChange = {
  ChangeBatch: {
    Changes: [{
      Action: "CREATE",
      ResourceRecordSet: {
        Name: "example.com",
        TTL: 60,
        Type: "A",
        ResourceRecords: [ { Value: "192.0.2.44" } ],
      }
    }],
    Comment: "Web server for example.com"
  },
  HostedZoneId: "Z3M3LMPEXAMPLE"
};

